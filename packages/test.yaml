# homeassistant:

#- platform: verizonwireless
#  username: !secret vzw_username
#  password: !secret vzw_password
#  secret: !secret vzw_secret


# homeassistant:
#   customize:

#     script.set_random_color_2_all_bulbs:
#       hidden: false
#     script.light_set_color:
#       hidden: true

# input_label:
#   hue_color_lamp_1_random_color:
#     value: "no"
#   hue_color_lamp_2_random_color:
#     value: "no"
#   hue_color_lamp_3_random_color:
#     value: "no"

# group:
#   Family Room Hue Bulbs:
#     entities:
#       - light.hue_color_lamp_1
#       - light.hue_color_lamp_2
#       - light.hue_color_lamp_3
#   Input Labels:
#     entities:
#       - input_label.hue_color_lamp_1_random_color
#       - input_label.hue_color_lamp_2_random_color
#       - input_label.hue_color_lamp_3_random_color

# script:
#   set_random_color_2_all_bulbs:
#     sequence:
#       - condition: template
#         value_template: >
#             {%- macro get_next_entity_id() -%}
#               {%- for item in states.group.input_labels.attributes.entity_id if is_state(item, "no") -%}
#                 {{- "," if not loop.first-}}{{- item -}}{{-endif-}}
#               {%- endfor -%}              
#             {%- endmacro -%}
#             {%- set entity_ids = get_next_entity_id() -%}
#             {% if entity_ids | trim != "" and entity_ids.split(',') | length | int == 0 %}
#               false
#             {% else %}
#               true
#             {% endif %}
#       - delay: '00:00:01'
#       - service: script.light_set_color
#         data_template:
#           entity_id: >-
#             {%- macro get_next_entity_id() -%}
#               {%- for item in states.group.input_labels.attributes.entity_id if is_state(item, "no") -%}
#                 {{- "," if not loop.first-}}{{- item -}}{{-endif-}}
#               {%- endfor -%}              
#             {%- endmacro -%}
#             {%- set entity_ids = get_next_entity_id() -%}
#             {% if entity_ids | trim != "" %}
#               {%- if entity_ids.split(',') | length > 0 -%}
#                 {{- 'light.' ~ entity_ids.split(',')[0].split('.')[1].replace('_random_color', '') -}}
#               {%- endif -%}
#             {% endif %}
#           brightness: 254
#           r: '{{ "{0:d}".format(range(210, 238)|random) }}'
#           g: '{{ "{0:d}".format(range(100, 132)|random) }}'
#           b: '{{ "{0:d}".format(range(240, 254)|random) }}'

#   light_set_color:
#     sequence:
#       - condition: template
#         value_template: '{{ entity_id | trim != "" }}'
#       - condition: template
#         value_template: '{{ brightness | trim != "" }}'
#       - service: light.turn_on
#         data_template:
#           entity_id: '{{ entity_id }}'
#           brightness: '{{ brightness }}'
#           rgb_color: ['{{"{0:d}".format(range(210, 238)|random)|int}}', '{{"{0:d}".format(range(210, 238)|random)|int}}', '{{"{0:d}".format(range(210, 238)|random)|int}}']
#       - service: input_label.set_value
#         data_template:
#           entity_id: "input_label.{{- entity_id.split('.')[1] -}}_random_color"
#           value: 'yes'
#       - delay: '00:00:01'
#       - service: script.set_random_color_2_all_bulbs

# automation:
#   - alias: Fire Event
#     trigger:
#       platform: state
#       entity_id: switch.kitchen
#     action:
#       event: my_test_event
#       event_data:
#         foo: "bar"

#   - alias: Capture Event
#     trigger:
#       platform: event
#       event_type: my_test_event
#     action:
#       - service: script.notify_me
#         data_template:
#           message: "Test Event Captured with data foo: {{ trigger.event.data.foo }}"

# automation:
#   - alias: Speakers On During Presence
#     trigger:
#       - platform: state
#         entity_id:
#           - binary_sensor.masterbed_motion
#           - binary_sensor.masterbath_motion
#           - binary_sensor.bathroom_motion
#           - binary_sensor.kitchen_motion
#           - binary_sensor.den_motion
#     action:
#       - service_template: 'switch.turn_{{ trigger.to_state.state }}'
#         data_template:
#             entity_id: '{{ trigger.entity_id.replace("binary_sensor", "group") }}'

#- id: Sunset_if_home
# automation:
#   - alias: 'Hemkomst'
#     trigger:
#       platform: state
#       entity_id: 'group.telefoner'
#       state: 'home' 
#     condition:
#       - condition: time
#         after: '12:00:00'
#         before: '02:00:00'          
#     action:
#       - service_template: scene.turn_on
#         data_template:
#           entity_id: >-
#             {%set elevation = states.sun.sun.attributes.elevation | int %}
#             {% if elevation > -10 and elevation | int < 5 %}
#               scene.normalvit
#             {% elif elevation | int > 5 %}
#               scene.dimmad_vit
#             {% endif %}


# automation:
#   - alias: Run every 15 seconds
#     hide_entity: false
#     initial_state: true
#     trigger:
#       - platform: time_pattern
#         seconds: '/15'
#     action:
#       - service_template: >-
#           {% if states.switch.kitchen_light.state == 'on' %}
#           switch.turn_off
#           {% else %}
#           switch.turn_on
#           {% endif %}
#         entity_id: switch.kitchen_light

# automation:
#   - alias: ResetMotionSensors
#     trigger:
#       - platform: state
#         entity_id: binary_sensor.hallway_motion
#         to: 'on'
#         for:
#           seconds: 30
#       - platform: state
#         entity_id: binary_sensor.livingroom_motion
#         to: 'on'
#         for:
#           seconds: 30
#       - platform: state
#         entity_id: binary_sensor.kitchen_motion
#         to: 'on'
#         for:
#           seconds: 30
#     action:
#       - service: mqtt.publish
#         data_template:
#           payload: '{"state": "open"}'
#           topic: >-
#             {% set mapping = '{ "hallway": "985335", "livingroom": "854267", "kitchen": "699555" }' %}
#             {{ 'Hassio/433/Honeywell/Honeywell_Door/Window_Sensor/' ~ mapping[trigger.entity_id.split('.')[1].split('_')[0] ~ ''] }}

# automation:
#   - alias: 'Pass list to script'
#     trigger:
#       - platform: state
#         entity_id: switch.kitchen_light
#     action:
#       - service: script.test_script
#         data:
#           entities_list:
#             - light.hue_color_lamp_1
#             - light.hue_color_lamp_2
#             - light.hue_color_lamp_3
# script:
#   test_script:
#     sequence:
#       - service_template: light.turn_on
#         data_template:
#           entity_id: >
#             {% for e in entities_list %}
#             {%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}
#             {{ e }}
#             {%- endfor %}



# https://raw.githubusercontent.com/awesome-automations/home/master/apcups.html

# sensor:
#   - platform: rest
#     resource: https://raw.githubusercontent.com/awesome-automations/home/master/apcups.html
#     name: BATTERY_MODEL
#     scan_interval: 60
#     value_template: >
#       {%- macro GetValue(str) -%}
#       {%- if str in value -%}
#         {%- set index = value.split(str)[0]|length -%}
#         {{ value[index+str|length:value|length].split('\n')[0] }}
#       {%- endif -%}
#       {%- endmacro %}
#       {{ GetValue('MODEL    : ') }}



# input_boolean:
#   color_loop:
#     initial: off

# automation:
#   - alias: Colorloop Automation
#     trigger:
#       - platform: state
#         entity_id: input_boolean.color_loop
#     action:
#       - service_template: script.color_loop_ "{{- trigger.to_state.state -}}"

# script:
#   color_loop_on:
#     sequence:
#       - service: light.turn_on
#         data:
#           entity_id: light.xxx
#           effect: colorloop

#   color_loop_off:
#     sequence:
#       - service: light.turn_off
#         entity_id: light.xxx